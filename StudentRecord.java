/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.library;

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.GregorianCalendar;
import java.util.Calendar;
import java.io.IOException;
import java.io.FileNotFoundException;

/**
 *
 * @author this pc
 */
public class StudentRecord extends javax.swing.JFrame {

    /**
     * Creates new form StudentRecord
     */
    public StudentRecord() {
        initComponents();
        System.out.println(getClass().getClassLoader());
        stuimg_l.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/library/null.jpg")));
        //getClass returns the object of class i.e. object of type StudentRecord 
        //getresource returns the url of the object related to string
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roll_l = new javax.swing.JLabel();
        roll = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        find = new javax.swing.JButton();
        info = new javax.swing.JLabel();
        issue = new javax.swing.JButton();
        ret = new javax.swing.JButton();
        info1_l = new javax.swing.JLabel();
        booknum_l = new javax.swing.JLabel();
        ibooknum = new javax.swing.JTextField();
        stuimg_l = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        roll_l.setText("Roll Number:");

        roll.setText("350/coe/14");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Book No.", "Issue Date", "Fine"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        find.setText("Find Record");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        issue.setText("issue");
        issue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueActionPerformed(evt);
            }
        });

        ret.setText("return");
        ret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retActionPerformed(evt);
            }
        });

        booknum_l.setText("BookNumber For Issue:");

        ibooknum.setText("1/2");

        stuimg_l.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 51, 51), 2, true));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(info1_l, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(booknum_l)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(issue)
                            .addComponent(ibooknum, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(113, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roll_l)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(find)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ret)
                            .addComponent(roll, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(info)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stuimg_l, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {issue, ret});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roll_l)
                            .addComponent(roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(info))
                        .addGap(71, 71, 71)
                        .addComponent(find)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(42, Short.MAX_VALUE)
                        .addComponent(stuimg_l, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(booknum_l)
                    .addComponent(ibooknum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issue)
                    .addComponent(ret))
                .addGap(56, 56, 56)
                .addComponent(info1_l)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cleanTable()
    {
        for(int i=0;i<table.getRowCount();i++)
        {
            for(int j=0;j<table.getColumnCount();j++)
            {
                table.setValueAt("", i, j);
            }
        }
        
    }
    private int fineCalculator(String issudate)
    {
        int fine=0;
        String issuedatepart[]=issudate.split("/");
        int month=Integer.parseInt(issuedatepart[0]);
        int date=Integer.parseInt(issuedatepart[1]);
        int year=Integer.parseInt(issuedatepart[2]);
        
        GregorianCalendar c=new GregorianCalendar();
        int pdayyear=c.get(Calendar.DAY_OF_YEAR);
        int pyear=c.get(Calendar.YEAR);
        c.set(Calendar.DATE, date);
        c.set(Calendar.MONTH,month-1);
        c.set(Calendar.YEAR, year);
        int dayyear=c.get(Calendar.DAY_OF_YEAR);
        
        if(pyear==year)
        {
            if(pdayyear-dayyear>7)
            {
                fine=pdayyear-dayyear-7;//fine for extra days only
            }
        }
        else
        {
            if(c.isLeapYear(year))
            {
                fine=366-dayyear;
            }
            else{
                fine=365-dayyear;
            }
            year++;
            for(;year<pyear;year++)
            {
                if(c.isLeapYear(year))
                {
                    fine+=366;
                }
                else
                {
                    fine+=365;
                }
            }
            fine+=pdayyear;
            if(fine<=7)
                fine=0;
            else
                fine=fine-7;//fine for extra days only
        }
        return fine;
    }
    
    private void imagesetter(String img)
    {
        img=img.split("/")[0];//taking no. part of roll no. only
        if((getClass().getResource("/com/library/"+img+".jpg"))!=null)
        {
            
            stuimg_l.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/library/"+img+".jpg")));
        }
        else
        {
            stuimg_l.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/library/null.jpg")));
        }
        
    }
    
    
    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        // TODO add your handling code here:
        info.setText("");
        cleanTable();
        String rol=roll.getText();
        boolean found=false;
        try
        {
            
            File f=new File(Library.url+"/student.txt");
            FileReader fr=new FileReader(f);
            BufferedReader br=new BufferedReader(fr, (int) f.length());
            String s;
            String parts[] = null;
            while((s=br.readLine())!=null)
            {
                parts=s.split(":");
                if(rol.equalsIgnoreCase(parts[0]))
                {
                    found=true;
                    break;
                }
            }
            
            if(found==true)
            {
                
                String bookno[]=parts[1].split(",");
                
                String date[]=parts[2].split(",");
                
                row=0;
                for(;row<bookno.length;row++)
                {
                    table.setValueAt(bookno[row], row,0);
                    table.setValueAt(date[row], row,1);
                    table.setValueAt(fineCalculator(date[row]), row,2);
                }
                info.setText("record found "+row+" books issued");
                record_exists=true;
                imagesetter(rol);
            }
            else
            {
                record_exists=false;
                info.setText("no such record exists");
                imagesetter("null");
            }
            
        br.close();
        }catch(Exception e)
        {
            System.out.println(e);
            info.setText("unable to connect database");
        }
        
        
        
    }//GEN-LAST:event_findActionPerformed
     
    private void returner(String bookno)
    {
       String rolnum=roll.getText();
       
           
       try
       {
           
           File f1=new File(Library.url+"/book.txt");
           FileReader fr1=new FileReader(f1);
           BufferedReader br1=new BufferedReader(fr1, (int) f1.length());
           File f2=new File(Library.url+"/temp.txt");
           FileWriter fo1=new FileWriter(f2);
           String s;
           
           while((s=br1.readLine())!=null)
           {
               String parts[]=s.split(":");
               String refnum[]=bookno.split("/");
               if(refnum[0].equals(parts[0]))
               {
                  int a=Integer.parseInt(parts[3]);
                  a+=1;
                  parts[3]=Integer.toString(a);
                  fo1.write(parts[0]+":"+parts[1]+":"+parts[2]+":"+parts[3]+"\n");
                  
                 
                  
                  
                   
               }
               else
               {
                   
                   fo1.write(s+"\n");
                   
                   
               }
           }
           br1.close();
           fr1.close();
           fo1.close();
           f1.delete();
           f2.renameTo(f1);
           
           
           
           
           f1=new File(Library.url+"/student.txt");
           fr1=new FileReader(f1);
           br1=new BufferedReader(fr1,(int)f1.length());
           f2=new File(Library.url+"/temp.txt");
           fo1=new FileWriter(f2);
           while((s=br1.readLine())!=null)
           {
               String parts[]=s.split(":");
               if(parts[0].equals(rolnum))
               {
                   String book[]=parts[1].split(",");
                   String date[]=parts[2].split(",");
                   String bookstr=null;//cannot use null else null will be printed in file
                   String datestr=null;
                   
                   for(int i=0;i<book.length;i++)
                   {
                       if(book[i].equals(bookno)==false)
                       {
                           if(bookstr==null&&datestr==null)
                           {
                               bookstr=book[i]+",";
                               datestr=date[i]+",";
                           }
                           else
                           {
                               bookstr=bookstr+book[i]+",";
                               datestr=datestr+date[i]+",";
                           }
                       }
                   }
                   if(bookstr==null&&datestr==null)
                   s=rolnum+":"+","+":"+",";
                   else
                   s=rolnum+":"+bookstr+":"+datestr;    
               }
               fo1.write(s+"\r\n");
           }
           br1.close();
           fr1.close();
           fo1.close();
           f1.delete();
           f2.renameTo(f1);
           row--;//decrease the record by 1
           
           
       }catch(Exception e)
       {
           info1_l.setText("Unable to return book ");
       }
           
           
           
       
    }
    private void issueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueActionPerformed
        // TODO add your handling code here:
        String bookno=ibooknum.getText();
        String rolnum=roll.getText();
        if(record_exists==false)//then create a new record add a book to it
        {
        try
        { 
            
           File f1=new File(Library.url+"/book.txt");
           FileReader fr1=new FileReader(f1);
           BufferedReader br1=new BufferedReader(fr1, (int) f1.length());
           File f2=new File(Library.url+"/temp.txt");
           FileWriter fo1=new FileWriter(f2);
           String s;
           
           while((s=br1.readLine())!=null)
           {
               String parts[]=s.split(":");
               String refnum[]=bookno.split("/");
               if(refnum[0].equals(parts[0]))
               {
                  int a=Integer.parseInt(parts[3]);
                  if(a!=0)
                  {
                      a-=1;
                  }
                  parts[3]=Integer.toString(a);
                  fo1.write(parts[0]+":"+parts[1]+":"+parts[2]+":"+parts[3]+"\r\n");
                  
                 
                  
                  
                   
               }
               else
               {
                   
                   fo1.write(s+"\r\n");
                   
                   
               }
           }
           br1.close();
           fr1.close();
           fo1.close();
           f1.delete();
           f2.renameTo(f1);
           
           
           
           
           f1=new File(Library.url+"/student.txt");
           fr1=new FileReader(f1);
           br1=new BufferedReader(fr1,(int)f1.length());
           f2=new File(Library.url+"/temp.txt");
           fo1=new FileWriter(f2);
           while((s=br1.readLine())!=null)
           {
              
               fo1.write(s+"\r\n");
           }
           GregorianCalendar c=new GregorianCalendar();
           int pdate=c.get(Calendar.DATE);
           int pmonth=c.get(Calendar.MONTH)+1;
           int pyear=c.get(Calendar.YEAR);
           s=rolnum+":"+bookno+":"+pmonth+"/"+pdate+"/"+pyear+",";
           fo1.write(s+"\r\n");
           br1.close();
           fr1.close();
           fo1.close();
           f1.delete();
           f2.renameTo(f1);
           
           row++;//increment the student record by one
           
       }catch(Exception e)
       {
           info1_l.setText("Unable to return book ");
       }
            
        }
        else//if record already exists then add book to it
        {
                      
        try
        { 
            
           File f1=new File(Library.url+"/book.txt");
           FileReader fr1=new FileReader(f1);
           BufferedReader br1=new BufferedReader(fr1, (int) f1.length());
           File f2=new File(Library.url+"/temp.txt");
           FileWriter fo1=new FileWriter(f2);
           String s;
           
           while((s=br1.readLine())!=null)
           {
               String parts[]=s.split(":");
               String refnum[]=bookno.split("/");
               if(refnum[0].equals(parts[0]))
               {
                  int a=Integer.parseInt(parts[3]);
                  if(a!=0)
                  {
                      a-=1;
                  }
                  parts[3]=Integer.toString(a);
                  fo1.write(parts[0]+":"+parts[1]+":"+parts[2]+":"+parts[3]+"\r\n");
                  
                 
                  
                  
                   
               }
               else
               {
                   
                   fo1.write(s+"\r\n");
                   
                   
               }
           }
           br1.close();
           fr1.close();
           fo1.close();
           f1.delete();
           f2.renameTo(f1);
           
           
           
           
           f1=new File(Library.url+"/student.txt");
           fr1=new FileReader(f1);
           br1=new BufferedReader(fr1,(int)f1.length());
           f2=new File(Library.url+"/temp.txt");
           fo1=new FileWriter(f2);
           while((s=br1.readLine())!=null)
           {
               String parts[]=s.split(":");
               if(parts[0].equalsIgnoreCase(rolnum))
               {
                   GregorianCalendar c=new GregorianCalendar();
                   int pdate=c.get(Calendar.DATE);
                   int pmonth=c.get(Calendar.MONTH)+1;
                   int pyear=c.get(Calendar.YEAR);
                   String bookstr=null;
                   String datestr=null;
                    if(row==0)
                    {
                        bookstr=bookno+",";
                        datestr=pmonth+"/"+pdate+"/"+pyear+",";
                    }
                    else
                    {
                        bookstr=parts[1]+bookno+",";
                        datestr=parts[2]+pmonth+"/"+pdate+"/"+pyear+",";
                    }
                    
                   
                   
                   s=rolnum+":"+bookstr+":"+datestr;
               }
               fo1.write(s+"\r\n");
           }
           br1.close();
           fr1.close();
           fo1.close();
           f1.delete();
           f2.renameTo(f1);
           
           row++;//increment the student record by one
           
       }catch(Exception e)
       {
           info1_l.setText("Unable to return book ");
       }
           
           
           
       }
        
    }//GEN-LAST:event_issueActionPerformed

    private void retActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retActionPerformed
        if(row!=0)//if there are books issued
        {
            int selectedrow=table.getSelectedRow();
            if(selectedrow!=-1)//if there is some row selected
            {
                
                String bookno=table.getValueAt(selectedrow,0).toString();
                table.setValueAt(" ", selectedrow, 0);
                table.setValueAt(" ", selectedrow, 1);
                table.setValueAt(" ", selectedrow, 2);
                
                returner(bookno);
                
            }
        }
        
    }//GEN-LAST:event_retActionPerformed

    public static void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentRecord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentRecord().setVisible(true);
            }
        });
    }
    private int row=0;
    private boolean record_exists=false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel booknum_l;
    private javax.swing.JButton find;
    private javax.swing.JTextField ibooknum;
    private javax.swing.JLabel info;
    private javax.swing.JLabel info1_l;
    private javax.swing.JButton issue;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton ret;
    private javax.swing.JTextField roll;
    private javax.swing.JLabel roll_l;
    private javax.swing.JLabel stuimg_l;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
